import app from './app';

// Gestion des erreurs non capturÃ©es
process.on('uncaughtException', (err) => {
	console.error('UNCAUGHT EXCEPTION! ğŸ’¥ Shutting down...');
	console.error(err.name, err.message, err.stack);
	process.exit(1);
});

// Port du serveur (sera configurÃ© via les variables d'environnement dans l'issue 3)
const port = process.env.PORT || 3000;

// DÃ©marrage du serveur
const server = app.listen(port, () => {
	console.log(`Server running on port ${port}`);
});

// Gestion des rejets de promesses non gÃ©rÃ©es
process.on('unhandledRejection', (err: Error) => {
	console.error('UNHANDLED REJECTION! ğŸ’¥ Shutting down...');
	console.error(err.name, err.message, err.stack);
	server.close(() => {
		process.exit(1);
	});
});

// Gestion de SIGTERM pour l'arrÃªt gracieux du serveur
process.on('SIGTERM', () => {
	console.log('ğŸ‘‹ SIGTERM RECEIVED. Shutting down gracefully');
	server.close(() => {
		console.log('ğŸ’¥ Process terminated!');
	});
});

export default server;